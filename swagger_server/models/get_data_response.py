# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.vehicle import Vehicle  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class GetDataResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data_id: str=None, vehicle: Vehicle=None, date_time: str=None):  # noqa: E501
        """GetDataResponse - a model defined in Swagger

        :param data_id: The data_id of this GetDataResponse.  # noqa: E501
        :type data_id: str
        :param vehicle: The vehicle of this GetDataResponse.  # noqa: E501
        :type vehicle: Vehicle
        :param date_time: The date_time of this GetDataResponse.  # noqa: E501
        :type date_time: str
        """
        self.swagger_types = {
            'data_id': str,
            'vehicle': Vehicle,
            'date_time': str
        }

        self.attribute_map = {
            'data_id': 'dataId',
            'vehicle': 'vehicle',
            'date_time': 'dateTime'
        }
        self._data_id = data_id
        self._vehicle = vehicle
        self._date_time = date_time

    @classmethod
    def from_dict(cls, dikt) -> 'GetDataResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetDataResponse of this GetDataResponse.  # noqa: E501
        :rtype: GetDataResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_id(self) -> str:
        """Gets the data_id of this GetDataResponse.


        :return: The data_id of this GetDataResponse.
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id: str):
        """Sets the data_id of this GetDataResponse.


        :param data_id: The data_id of this GetDataResponse.
        :type data_id: str
        """
        if data_id is None:
            raise ValueError("Invalid value for `data_id`, must not be `None`")  # noqa: E501

        self._data_id = data_id

    @property
    def vehicle(self) -> Vehicle:
        """Gets the vehicle of this GetDataResponse.


        :return: The vehicle of this GetDataResponse.
        :rtype: Vehicle
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle: Vehicle):
        """Sets the vehicle of this GetDataResponse.


        :param vehicle: The vehicle of this GetDataResponse.
        :type vehicle: Vehicle
        """
        if vehicle is None:
            raise ValueError("Invalid value for `vehicle`, must not be `None`")  # noqa: E501

        self._vehicle = vehicle

    @property
    def date_time(self) -> str:
        """Gets the date_time of this GetDataResponse.

        Date/Time  # noqa: E501

        :return: The date_time of this GetDataResponse.
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time: str):
        """Sets the date_time of this GetDataResponse.

        Date/Time  # noqa: E501

        :param date_time: The date_time of this GetDataResponse.
        :type date_time: str
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time
